#!/usr/bin/env ruby

autoload :Find, 'find'
require 'optparse'

def run(cmd)
  unless system(cmd)
    exit(1)
  end
end

options = {
  # Run debugger tests by default, since default test set is not useful.
  debugger: true,
}
OptionParser.new do |opts|
  opts.banner = "Usage: str [options]"

  opts.on("--ruby", "Test against Ruby library's most recent release") do
    options[:ruby] = true
  end

  opts.on("--ruby-dev", "Test against local develompent tree of Ruby library") do
    options[:ruby_dev] = true
    options[:ruby] = true
  end

  opts.on('-d', "--debugger", "Run all dynamic instrumentation / \"debugger\" tests") do
    options[:debugger] = true
  end

  opts.on("--debugger-pii", "Run debugger_pii_redaction scenario") do
    options[:scenarios] ||= []
    options[:scenarios] << 'debugger_pii_redaction'
    options.delete(:debugger)
  end

  opts.on("-t", "--test TEST", "Specify test to run (can be used more than once)") do |v|
    options[:tests] ||= []
    options[:tests] << v
  end

  opts.on('-v', "--verbose", "Request verbose pytest output") do
    options[:verbose] = true
  end

  opts.on("--verify", "Do not run the tests but verify results using the current system tests' test code (\"replay\" mode). Only works when one test is executed") do
    options[:verify_only] = true
  end
end.parse!

# Verify current path is in system-tests
unless File.exist?('run.sh') && File.exist?('manifests')
  raise "Expected to be in system-tests"
end

language = if options[:ruby]
  'ruby'
else
  raise "Language not specified"
end

if options[:ruby_dev]
  run('rsync -av ~/apps/dtr/ binaries/dd-trace-rb --exclude .git --delete')
end

# If we are only verifying, we do not need to build.
# We also do not really need to patch since there isn't too much work
# happening during the running phase.
unless options[:verify_only]
  run("./build.sh #{language}")

  # Patch pytest to report collected tests before running in verbose mode.
  # There is no upstream option to do so; there is apparently an option to
  # make it report the collected tests but not run anything, and we could
  # possibly use this but at an increase in runtime and then we would still
  # need to patch system tests shell scripts to request that command to be
  # executed.
  Find.find('venv') do |path|
    if File.basename(path) == 'terminal.py' && path =~ %r,_pytest/terminal.py\z,
      patch_path = File.realpath(File.join(File.dirname(File.realpath(__FILE__)), '../patches/pytest/terminal.py.patch'))
      unless File.read(path).include?('system-tests-runner:')
        puts "Patching pytest"
        Dir.chdir(File.dirname(path)) do
          run("patch -p1 < #{patch_path}")
        end
      end
    end
  end
end

DEBUGGER_SCENARIOS = %w,
  debugger_probes_status

  debugger_method_probes_snapshot
  debugger_line_probes_snapshot
  debugger_mix_log_probe

  debugger_pii_redaction

  debugger_exception_replay
  debugger_expression_language
,

run_args = ''
if options[:verbose]
  run_args << " -x"
end

selected_scenarios = options[:scenarios] || if options[:debugger]
  DEBUGGER_SCENARIOS
else
  []
end
selected_scenarios.each do |scenario|
  run_args << " +S #{scenario}"
end

if options[:verbose]
  run_args << " -v"
end

if options[:verify_only]
  run_args << " --replay"
end

cmd = "./run.sh #{run_args}"

puts "Executing: #{cmd}"
run(cmd)
