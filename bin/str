#!/usr/bin/env ruby

autoload :YAML, 'yaml'
autoload :JSON, 'json'
autoload :FileUtils, 'fileutils'
autoload :Find, 'find'
require 'optparse'

def run(cmd)
  unless system(cmd)
    puts "Failed to run: #{cmd}"
    exit(1)
  end
end

def get_output(cmd)
  IO.popen(cmd) do |io|
    io.read
  end
end

# Loads YAML using YAML 1.2 behavior.
# In particular this does not map on/yes to true.
# See https://stackoverflow.com/questions/28507195/yaml-ruby-loading-on-as-true
# and https://stackoverflow.com/questions/36463531/pyyaml-automatically-converting-certain-keys-to-boolean-values
def load_yaml_12(src)
  doc = YAML.parse(src)
  doc.select{ |node| node.is_a?(Psych::Nodes::Scalar) &&
                   %w(on off).include?(node.value) }
    .each{|node| node.quoted = true }
  doc.to_ruby
end

DEBUGGER_SCENARIOS = %w,
  debugger_probes_status

  debugger_method_probes_snapshot
  debugger_line_probes_snapshot
  debugger_mix_log_probe

  debugger_pii_redaction

  debugger_exception_replay
  debugger_expression_language
,

options = {
}
OptionParser.new do |opts|
  opts.banner = "Usage: str [options]"

  opts.on("--rebuild", "Rebuild everything") do
    options[:rebuild] = true
  end

  opts.on('-L', "--language=LANG", "Test against tracer in specified language") do |v|
    options[:language] = v
  end

  opts.on("--ruby", "Test against Ruby library's most recent release") do
    options[:language] = 'ruby'
    options.delete(:dev)
  end

  opts.on("--ruby-dev", "Test against local develompent tree of Ruby library") do
    options[:dev] = true
    options[:language] = 'ruby'
  end

  opts.on('-V', '--variant=VARIANT', 'Specify weblog variant') do |v|
    options[:weblog_variant] = v
  end

  opts.on('-d', "--debugger", "Run all dynamic instrumentation / \"debugger\" tests") do
    options[:debugger] = true
  end

  opts.on("--debugger-ruby", "Run debugger scenarios implemented in Ruby") do
    options[:scenarios] ||= []
    options[:scenarios] += %w,
      DEBUGGER_PII_REDACTION
      DEBUGGER_PROBES_SNAPSHOT
      DEBUGGER_PROBES_STATUS
    ,
    options.delete(:debugger)
  end

  opts.on("--debugger-pii", "Run debugger_pii_redaction scenario") do
    options[:scenarios] ||= []
    options[:scenarios] << 'debugger_pii_redaction'
    options.delete(:debugger)
  end

  opts.on("-s", "--scenario SCENARIO", "Specify scenario to run (in any case, can be used more than once)") do |v|
    options[:scenarios] ||= []
    options[:scenarios] << v
  end

  opts.on("-t", "--test-file TEST", "Specify test file to run (can be used more than once)") do |v|
    options[:tests] ||= []
    options[:tests] << v
  end

  opts.on('-v', "--verbose", "Request verbose pytest output") do
    options[:verbose] = true
  end

  opts.on("--verify", "Do not run the tests but verify results using the current system tests' test code (\"replay\" mode). Only works when one test is executed") do
    options[:verify_only] = true
  end

  opts.on('--generate-forced-tests-list', 'Generate forced tests list') do
    options[:generate_forced_tests_list] = true
  end

  opts.on('--crop-system-tests-to-debugger', 'Crop system tests in tracer to debugger only') do
    doc = load_yaml_12(File.read('.github/workflows/system-tests.yml'))
    variant = (options[:weblog_variant] ||= 'rails70')
    %w(build-apps test aggregate).each do |job|
      doc['jobs'][job]['strategy']['matrix']['app'] = [variant]
    end
    doc['jobs']['test']['strategy']['matrix']['scenario'] = %w,DEFAULT,
    doc['jobs']['test']['strategy']['matrix']['include'].delete_if do |spec|
      spec['scenario'] !~ /DEBUGGER/
    end
    %w(cleanup).each do |job|
      images = doc['jobs'][job]['strategy']['matrix']['image'].reject do |image|
        image =~ /\Aweblog-/ && !image.include?(variant)
      end
      doc['jobs'][job]['strategy']['matrix']['image'] = images
    end
    File.open('.github/workflows/system-tests.yml', 'w') do |f|
      f << YAML.dump(doc)
    end
    exit
  end

  opts.on('--show-tests', 'Show defined tests') do
    options[:show_tests] = true
  end

  opts.on('--builder-help', 'Show system tests builder help') do
    options[:builder_help] = true
  end

  opts.on('--runner-help', 'Show system tests runner help') do
    options[:runner_help] = true
  end
end.parse!

unless options[:tests]
  # Run debugger tests by default, since default test set is not useful.
  warn 'scoping testst to debugger since none were requested'
  options[:debugger] = true
end

# Verify current path is in system-tests
unless File.exist?('run.sh') && File.exist?('manifests')
  raise "Expected to be in system-tests"
end

if options[:builder_help]
  run("./build.sh -h")
  exit
end

if options[:runner_help]
  run("./run.sh +h")
  exit
end

if options[:generate_forced_tests_list]
  scenarios = DEBUGGER_SCENARIOS
  scenario_files = {}
  scenarios.each do |scenario|
    Find.find('tests/debugger') do |path|
      if File.basename(path) =~ /\Atest_debugger_.*\.py\z/
        contents = File.read(path)
        contents.scan(/@scenarios.#{scenario}([^:]+)/) do |match|
          if $1 =~ /\bclass (\w+)/
            scenario_files[scenario.upcase] ||= []
            scenario_files[scenario.upcase] << "#{path}::#{$1}"
          end
        end
      end
    end
  end
  puts JSON.pretty_generate(scenario_files)
  exit
end

language = options[:language] || 'ruby'
if language == 'node'
  language = 'nodejs'
end

if language == 'ruby'
  if options[:dev]
    run('rsync -av ~/apps/dtr/ binaries/dd-trace-rb --exclude .git --delete')
  elsif
    # A bit sketchy...
    run('rm -rf binaries/dd-trace-rb')
  end
end

def decide_python_version
  dirs = ENV.fetch('PATH').split(':')
  %w(3.13 3.12).each do |version|
    dirs.each do |dir|
      if File.exist?(File.join(dir, "python#{version}"))
        return version
      end
    end
  end
  raise "No compatible python versions found on system"
end

# If we are only verifying, we do not need to build.
# We also do not really need to patch since there isn't too much work
# happening during the running phase.
unless options[:verify_only]
  if options[:rebuild] || !File.exist?('venv')
    # I'm sure venv is created by system tests somehow...
    # This didn't happen after I deleted it due to system tests now
    # using Python 3.11+ features.
    # Plus from what I see in build.sh, system tests tries to use either
    # python 3.12 or 3.9 and currently ubuntu offers 3.10 and 3.11.
    # So, create venv manually here.
    python_version = decide_python_version
    FileUtils.rm_rf('venv')
    run("virtualenv -p python#{python_version} venv")
    run('. venv/bin/activate && pip install -r requirements.txt')
  end

  variant = case language
  when 'ruby'
    options[:weblog_variant] || 'rails70'
  else
    nil
  end
  cmd = "./build.sh"
  if variant
    cmd << " --weblog-variant #{variant}"
  end
  cmd << " #{language}"
  run(cmd)

  # Patch pytest to report collected tests before running in verbose mode.
  # There is no upstream option to do so; there is apparently an option to
  # make it report the collected tests but not run anything, and we could
  # possibly use this but at an increase in runtime and then we would still
  # need to patch system tests shell scripts to request that command to be
  # executed.
  Find.find('venv') do |path|
    if File.basename(path) == 'terminal.py' && path =~ %r,_pytest/terminal.py\z,
      patch_path = File.realpath(File.join(File.dirname(File.realpath(__FILE__)), '../patches/pytest/terminal.py.patch'))
      unless File.read(path).include?('system-tests-runner:')
        puts "Patching pytest"
        Dir.chdir(File.dirname(path)) do
          run("patch -p1 < #{patch_path}")
        end
      end
    end
  end

  # If we are not verifying, delete existing logs.
  Dir.entries('.').select do |entry|
    entry =~ /\Alogs(_|\z)/
  end.each do |entry|
    FileUtils.rm_rf(entry)
  end
end

selected_scenarios = options[:scenarios] || if options[:debugger]
  DEBUGGER_SCENARIOS
else
  []
end
selected_scenarios = Set.new(selected_scenarios)

if options[:show_tests]
  run('pip install -r requirements.txt')
  manifest_data = YAML.load(File.read('manifests/ruby.yml'))
  #require'byebug';byebug
  if options[:debugger]
    manifest_data['tests/'].delete_if do |k, v|
      k != 'debugger/'
    end
  end
  test_info_path = File.join(File.dirname(File.realpath(__FILE__)), '../support/test-info.py')
  manifest_data.each do |subdir1, subdir1_data|
    subdir1_data.each do |subdir2, tests_data|
      tests_data.each do |basename, test_map|
        mod_name = [File.basename(subdir1), File.basename(subdir2), basename.sub(/\.py\z/, '')].join('.')
        puts mod_name
        cmd = "env PYTHONPATH=. venv/bin/python #{test_info_path} #{mod_name}"
        puts(cmd)
        info = get_output(cmd)
        if $?.exitstatus != 0
          raise "Failed to run: #{cmd}"
        end
        info = JSON.parse(info)

        test_map.each do |cls_name, version|
          scenario_name = info[mod_name][cls_name]['scenario']
          test_map[cls_name] = {version: version, scenario: scenario_name}
        end
      end
    end
  end
  pp manifest_data
  exit
end

run_args = ''

parametric = options[:tests]&.any? do |test|
  test =~ %r,\Atests/parametric/,
end
=begin not needed?
if parametric
  run_args << ' PARAMETRIC'
end
=end

if parametric
  run_args << " -L #{language}"
else
  run_args << " --library #{language}"
end

scenarios_added = false
if tests = options[:tests]
  add_scenarios = options[:scenarios].nil?
  tests.each do |test|
    if add_scenarios
      if File.exist?(test)
        File.open(test) do |f|
          f.each_line do |line|
            if line =~ /\A@scenarios.(\w+)/
              options[:scenarios] ||= []
              unless selected_scenarios.include?($1)
                selected_scenarios << $1
                puts "adding scenario #{$1} for test file #{test}"
                scenarios_added = true
              end
            end
          end
        end
      else
        warn "file does not exist: #{test}"
      end
    end
    run_args << " #{test}"
  end
end

if scenarios_added
  selected_scenarios << 'default'
end
if selected_scenarios.include?('default')
  selected_scenarios.delete('default')
  selected_scenarios = %w,default, + selected_scenarios.to_a
end

selected_scenarios.each do |scenario|
  run_args << " +S #{scenario}"
end

if options[:verbose]
  run_args << " -v -s"
end

if options[:verify_only]
  run_args << " --replay"
end

cmd = "./run.sh #{run_args}"
if options[:verbose]
  cmd = "bash -x #{cmd}"
end

puts "Executing: #{cmd}"
run(cmd)
